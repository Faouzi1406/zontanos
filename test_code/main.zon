fn println(value: i8^) i32 {
	let chars: i32 = printf(^"%s%c", ^value, '\n')
	return chars
}

fn readChar() i8 {	
	let value: char = getchar();
	return value
}

fn putChar(charToPut: char) char {
	putchar(charToPut)
	return charToPut	
}

fn welkom() void {
	println(^"Welkom my friend")
	return void
}

fn recurse(value: i32, limit: i32) i32 {
	printf(^"oaky %d %c", value,'\n')

	if value >= limit {
		println(^"limit reached.")
		return value;
	} else {
		let v: i32 = value;
		v += 1;
	 	return recurse(v, limit);
	}

	return 18
}

fn factorial(n:i32) i32 {
	if n <= 1 {
		return 1
	} else {
		let b: i32 = n; 
		let c: i32 = n;

		b -= 1;

		let fact: i32 = factorial(b)
		c *= fact;

		return c
	}
}

fn testTimesIs() void {
	let value: i32 = 10;
	value -= 200
	printf(^"Value is now: %d", value)
	println(^";")
	return void;
}

fn main() void {
	let fun: i32 = recurse(0, 1000)
	println(^"faouzi")
	testTimesIs()
	let fact: i32 = factorial(10)
	printf(^"fact = %d", fact)
	return void
}
